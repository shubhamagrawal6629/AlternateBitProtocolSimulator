#include <iostream>
#include <fstream>
#include <string>
#include <fcntl.h>
#include <errno.h>
#include <regex>
#include <bits/stdc++.h> 
#include <boost/algorithm/string.hpp>

#include "../include/file_process.hpp"

#define BUF_SIZE 2048

using namespace std;

void output_file_process(char *fin, char *fout) {
    // check if the read access to the input file is OK
    if (access(fin, R_OK)) {
        std::cout << "The file " << fin << " can not be read from, errno = " << errno << "\n";
    }
    else {
        // read the input file into a string
        char *file = read_file(fin);
        // write the data from the input file string into output file
        write_file(fout, file);
    }
}

char *read_file(char *fin) {
    char read_buf[BUF_SIZE];
    char *file;
    int size;
    int i = 1;
	
    int fdi = open(fin, O_RDONLY);
	
    if (fdi > 0) {
        // read a block of data
        while ((size = read(fdi, read_buf, BUF_SIZE)) != 0) {
            if (i == 1) {
                // allocate memory and store the first block of data
                file = (char *) malloc(sizeof(char) * BUF_SIZE);
                file = strncpy(file, read_buf, size);
            }
            else {
                // reallocate memory and append the next block of data
                file = (char *) realloc(file, sizeof(char) * BUF_SIZE * i);
                strncpy(file + BUF_SIZE * (i - 1), read_buf, size);
            }
            i++;
        }
    }
    else {
        cout << "The file " << fin << " can not be opened for reading, errno = " << errno << "\n";
    }
	
    int fc = close(fdi);
    if (fc < 0) {
        cout << "The file " << fin << " can not be closed\n";
    }
	
    return(file);
}

void write_file(char *fout, char *file) {
    ofstream out_file (fout);
    char* pch = NULL;
    char* time;
	
    if (out_file.is_open()) {
        out_file << "Time\t\t\tvalue\tport\t\t\t\t\tcomponent\n";

        // split the file string on new line
        pch = strtok(file, "\r\n");

        while (pch != NULL) {
            regex b("\\d+:\\d+:\\d+:\\d+");
            if ( regex_match(pch, b) ) { // is the line a Time line ?
                time = pch;
                time[strlen(time)] = '\0';
	    }
	    else {  // the line is not a Time line
                string port_str;
                string comp;
                vector<string> result;
		
                // get the string in [] brackets and the name of component		
                regex r("\\[(.*)\\] generated by model (.*)");
                port_str = regex_replace(pch, r, "$1"); 
                comp = regex_replace(pch, r, "$2"); 

                // split the string in [] brackets by comma and store in result vector
                boost::split(result, port_str, boost::is_any_of(","));

                // iterate through all results		
                for (int i = 0; i < result.size(); i++) {
                    string port;
                    string value;

                    // get the port and value from the result item
                    regex r("(.*)\\:\\:(.*)\\: \\{(.*)\\}");
                    port = regex_replace(result[i], r, "$2"); 
                    value = regex_replace(result[i], r, "$3"); 
		    
                    // if value is not empty, output to file in specified format			
                    if (strcmp(&value[0], "") != 0) {
                        out_file << setw(15) << left << time << "\t"<<setw(7) << value<<"\t" << setw(20) << port<<"\t" << setw(15) << comp << "\n";
                    }
                }
            }
            pch = strtok(NULL, "\r\n");
	}		
    }
    else {
        cout << "The file " << fout << " can not be opened for writing, errno = " << errno << "\n";
    }
}
